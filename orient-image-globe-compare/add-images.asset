local assetHelper = asset.require('util/asset_helper')
local transforms = asset.require("scene/solarsystem/sun/transforms")
local earth = asset.require('scene/solarsystem/planets/earth/earth')
local mars = asset.require('scene/solarsystem/planets/mars/mars')

local debugHelper = asset.require('util/debug_helper')

local objectPositions = asset.localResource('globePositions.csv')
local imagesFolder = asset.localResource('images')

local i = 1

--function that reads the file
local createPositions = function (guiPath, endurnacePositions)
  local genPositions = {};
  --skip the first line
  local notFirstLine = false;

  for line in io.lines(openspace.absPath(objectPositions)) do
      if (notFirstLine) then
        -- describes the data
        local matchstring = '(.-),(.-),(.-),(.-),(.-),(.-)$'
        local globe, lat, long, label, size_in_m, imagename = line:match(matchstring)
        local vx = 	math.cos (math.rad (lat))*math.cos (math.rad (long))
        local vy = 	math.cos (math.rad (lat))*math.sin (math.rad (long))
        local vz =  math.sin (math.rad (lat))

        local nx = 0
        local ny = 0
        local nz = 1

        local ex = vy*nz-vz*ny
        local ey = vz*nx-vx*nz
        local ez = vx*ny-vy*nx

        local aPosition = {
          Identifier = 'SufaceImage'..i,
          Parent = globe,
          Transform = {
              Translation = {
                  Type = "GlobeTranslation",
                  Globe = globe,
                  Longitude =  tonumber(long),
                  Latitude =  tonumber(lat),
                  Altitude = 500.0,
                  UseHeightMap = true
              },
              Rotation = {
                  Type = "FixedRotation",
                  ZAxis = {vx, vy, vz },
                  XAxis = {-ex, -ey, -ez},
              }

          },
          Renderable = {
              Type = "RenderablePlaneImageLocal",
              Size = tonumber(size_in_m)/2,
              Enabled = true,
              Origin = "Center",
              Billboard = false,
              Texture = imagesFolder.."/"..imagename,
              BlendMode = "Normal",
              LazyLoading = false,
              Opacity = 0.5
          },
          Tag = { "imagemarkers" },
          GUI = {
              Name = 'image of '..label,
              Path = '/Examples/Orient-Images-Globe'
          }
        }
        table.insert(genPositions, aPosition);

        local aLabel = {
            Identifier = "PositionLabel"..i,
            Parent = "SufaceImage"..i,
            Renderable = {
                Enabled = false,
                Type = "RenderableLabels",
                LabelText = label,
                FontSize = 50.0,
                LabelSize = 2.5,
                LabelMaxSize = 23.0,
                LabelMinSize = 1.0,
                LabelOrientationOption = "Camera View Direction",
                BlendMode = "Additive"
            },
            Tag = { "image_labels" },
        }
        table.insert(genPositions, aLabel);
        --debugHelper.registerCartesianAxes(asset, {
        --    Parent = "SufaceImage"..i,
        --    Scale = 500000
        --})
        i = i + 1
      else
        notFirstLine = true
      end
  end
  return genPositions

end






local nodes = {}


asset.onInitialize(function ()
local objectPositionsList = objectPositions

  nodes = createPositions('TransAtlantic', objectPositionsList)
  for _, n in ipairs(nodes) do
    openspace.addSceneGraphNode(n);
  end

end)

asset.onDeinitialize(function ()
  for _, n in ipairs(nodes) do
    openspace.removeSceneGraphNode(n.Identifier);
  end
  for _, nn in ipairs(nodes2) do
    openspace.removeSceneGraphNode(nn.Identifier);
  end
end)


asset.meta = {
    Name = "Objects",
    Version = "1.0",
    Description = "TestRotations",
    Author = "James Hedberg",
    URL = "https://jameshedberg.com",
    License = "CC-BY"
}
