local assetHelper = asset.require('util/asset_helper')
local transforms = asset.require("scene/solarsystem/sun/transforms")
local transforms = asset.require('./transforms')
local systemCenter = transforms.CastorSystemCenter.Identifier

--function that reads the file
local AUtoKM = 1.496E8
local getStars = function (guiPath, starsfile)
  local genStars = {};
  --skip the first line
  local notFirstLine = false;

  for line in io.lines(openspace.absPath(starsfile)) do
      if (notFirstLine) then
        -- describes the data
        local matchstring = '(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-)$'
        local group, name, _parent, _eccentricity, _semimajoraxis, _inclination, _ascendingnode, _argumentofperiapsis, _meananomaly, _epoch, _period, _starScale, _starTex = line:match(matchstring)

        group = (group == '' and globe or group)

        local aStar = {
          Identifier = name,
          Parent = _parent,
          Transform = {
              Translation = {
                  Type = "KeplerTranslation",
                  Eccentricity = tonumber(_eccentricity),
                  SemiMajorAxis = tonumber(_semimajoraxis)*AUtoKM,
                  Inclination = tonumber(_inclination),
                  AscendingNode = tonumber(_ascendingnode),
                  ArgumentOfPeriapsis = tonumber(_argumentofperiapsis),
                  MeanAnomaly = tonumber(_meananomaly),
                  Epoch = _epoch,
                  Period = tonumber(_period)*3.154E7;
                  }
            },
            --Renderable = {
            --    Type = "RenderableGlobe",
            --    Radii = 6.957E12,
            --    SegmentsPerPatch = 64,
            --    PerformShading = false,
            --    Layers = {
            --    ColorLayers = {
            --          {
            --            Identifier = "Texture",
            --            FilePath = asset.localResource("addons-dev/castor-system/textures/white.png"),
            --            Enabled = true
            --          }
            --        }
            --      }
            --    },
            Renderable = {
            Type = "RenderablePlaneImageLocal",
            Enabled = true,
            Size = 1.0E13*tonumber(_starScale),
            Origin = "Center",
            Billboard = true,
            Texture = asset.localResource('addons-dev/castor-system/textures/'.._starTex..''),
            BlendMode = "Additive"
            },

            Tag = { "Castor", "star" },
            GUI = {
                Name = name,
                Path = "/Milky Way/CastorSystem/"..name
            }
        }


        table.insert(genStars, aStar);


        local aTrail = {
            Identifier = name .. "Trail",
            Parent = _parent,
            Renderable = {
                Type = "RenderableTrailOrbit",
                Translation = {
                    Type = "KeplerTranslation",
                    Eccentricity = tonumber(_eccentricity),
                    SemiMajorAxis = tonumber(_semimajoraxis)*AUtoKM,
                    Inclination = tonumber(_inclination),
                    AscendingNode = tonumber(_ascendingnode),
                    ArgumentOfPeriapsis = tonumber(_argumentofperiapsis),
                    MeanAnomaly = tonumber(_meananomaly),
                    Epoch =  _epoch,
                    Period = tonumber(_period)*3.154E7;
                },

                Color = {0.905, 0.935, 0.935 },
                Period = tonumber(_period)*3.154E7/86400,
                Resolution = 500,
                Tag = { "starTrail", "starTrail_castor" }
            },
            GUI = {
                Name = name .. "-trail",
                Path = "/Milky Way/CastorSystem/"..name
            }
        }
        table.insert(genStars, aTrail);

      else
        notFirstLine = true
      end
  end
  return genStars
end

asset.export('getStars', getStars)
